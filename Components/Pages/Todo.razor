@* Author:Santiago Pabon Date: 2025 - 03- 22. This Page in the applications is a TodoList program that 
allows for users to add task or items they would like to do. allowing for done items to be checkOff
and be deleted as well as always having the ability to delete a item in any stage before or after a 
todo is accomplished, as well as handles a custom exception (InvalidSpecialCharacterException) that
checks if a special character have been included in the todoItem these include @, #, $, %.
*@
@using BlazorHybridApp.Components.Exceptions
@using BlazorHybridApp.Components.Data
@page "/todo"


<h3>Todo List</h3>

<!-- TODO: Design the GUI based on the provided image -->
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}
<div>
    <input @bind="newItem" placeholder="Enter a new Todo to your list:" style="width:300px; height: 37.33px;" />
    <button type="button" class="btn btn-primary" @onclick="AddItem">Add</button>

    <h3>Todo</h3>
    <ul class="list-unstyled">
        @foreach (var item in items)
        {     
            if (!item.isDone)
            {
                <li>
                    <input type="checkbox" @bind="item.isDone"/>
                    <label>@item.title</label>
                    <button type="button" @onclick="() => RemoveItem(item)" class="btn btn-danger" style="margin-top: 5px;">Delete</button>
                </li>  
            }
        }
    </ul>
    <h3>Done</h3>
    <ul class="list-unstyled">
        @foreach (var item in items)
        {
            if (item.isDone)
            {
                <li>
                    <label style="margin-left: 17px;">@item.title</label>
                    <button type="button" @onclick="() => RemoveItem(item)" class="btn btn-danger" style="margin-top: 5px;">Delete</button>
                </li>
            }
        }


    </ul>

</div>


@code
{

    private string? newItem;
    private List<TodoItem> items = new List<TodoItem>();
    private string? errorMessage;

    private void AddItem()
    {
        // TODO: Add exception handling for invalid input (e.g., special characters)
        try
        {
            if (string.IsNullOrEmpty(newItem))
            {
                throw new ArgumentNullException();
            }
            if (newItem.Contains("@") || newItem.Contains("#") || newItem.Contains("$") || newItem.Contains("%"))
            {
                throw new InvalidSpecialCharacterInput("Todo item contains invalid characters. These are not allowed @ # $ %");
            }
            items.Add(new TodoItem { title = newItem, isDone = false });
            newItem = string.Empty;
            errorMessage = string.Empty;
        }
        catch(InvalidSpecialCharacterInput ex)
        {
            errorMessage = ex.Message;
        }
        catch (ArgumentNullException e)
        {
            errorMessage = e.Message;
        }
    }
    public void RemoveItem(TodoItem item)
    {
        items.Remove(item);

    }

}